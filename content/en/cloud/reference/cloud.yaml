{
  "openapi": "3.1.0",
  "info": {
    "title": "Meshery Cloud",
    "description": "Documentation for meshery Cloud REST APIs",
    "contact": {
      "email": "support@layer5.io"
    },
    "version": "v0.6.488"
  },
  "servers": [
    {
      "url": "https://meshery.layer5.io",
      "description": "Meshery Cloud production server URL"
    },
    {
      "url": "https://staging-meshery.layer5.io",
      "description": "Meshery Cloud staging server URL"
    },
    {
      "url": "http://localhost:9876",
      "description": "Meshery Cloud development server URL (controlled via PORT environment variable)"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "APIs for users"
    },
    {
      "name": "roles",
      "description": "APIs for user roles"
    },
    {
      "name": "service mesh performance",
      "description": "APIs for Service Mesh Performance Dashboard"
    },
    {
      "name": "service mesh performance results",
      "description": "APIs for Service Mesh Performance results"
    },
    {
      "name": "service mesh interface",
      "description": "APIs for Service Mesh Interface conformace"
    },
    {
      "name": "scheduler",
      "description": "APIs for scheduler"
    },
    {
      "name": "k8s context",
      "description": "APIs for K8s contexts"
    },
    {
      "name": "tokens",
      "description": "APIs for User tokens"
    },
    {
      "name": "credentials",
      "description": "APIs for Credentials"
    },
    {
      "name": "events",
      "description": "APIs for events"
    },
    {
      "name": "capabilities",
      "description": "APIs for remote provider capablities"
    },
    {
      "name": "system",
      "description": "APIs for system"
    },
    {
      "name": "content",
      "description": "APIs for content (patterns, applications, filters)"
    },
    {
      "name": "catalog",
      "description": "APIs for catalog"
    },
    {
      "name": "collaboration",
      "description": "APIs for collaboration"
    },
    {
      "name": "integrations",
      "description": "APIs for integrations"
    },
    {
      "name": "user onboarding",
      "description": "APIs for user onboarding (Signup requests)"
    },
    {
      "name": "organization",
      "description": "APIs related to organization"
    },
    {
      "name": "subscription",
      "description": "APIs related to subscription"
    },
    {
      "name": "plans",
      "description": "APIs related to plans"
    },
    {
      "name": "teams",
      "description": "APIs related to teams"
    },
    {
      "name": "keys",
      "description": "APIs related to keys"
    },
    {
      "name": "key chains",
      "description": "APIs related to key chains"
    },
    {
      "name": "environments",
      "description": "APIs related to environments"
    },
    {
      "name": "workspaces",
      "description": "APIs related to workspaces"
    }
  ],
  "security": [
    {
      "jwt": []
    }
  ],
  "components": {
    "schemas": {
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "provider": {
            "$ref": "#/components/schemas/provider"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "avatar_url": {
            "$ref": "#/components/schemas/avatar_url"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "bio": {
            "$ref": "#/components/schemas/bio"
          },
          "preferences": {
            "$ref": "#/components/schemas/map_object"
          },
          "accepted_terms_at": {
            "$ref": "#/components/schemas/accepted_terms_at"
          },
          "first_login_time": {
            "$ref": "#/components/schemas/time"
          },
          "last_login_time": {
            "$ref": "#/components/schemas/time"
          },
          "role_names": {
            "$ref": "#/components/schemas/schemas-roleNames"
          },
          "teams": {
            "type": "object",
            "properties": {
              "total_count": {
                "type": "integer"
              },
              "teams_with_roles": {
                "$ref": "#/components/schemas/schemas-teams"
              }
            }
          }
        },
        "required": [
          "id",
          "user_id",
          "provider",
          "email",
          "first_name",
          "last_name",
          "status",
          "created_at",
          "updated_at",
          "last_login_time",
          "deleted_at"
        ]
      },
      "usersPageForAdmin": {
        "allOf": [
          {
            "$ref": "#/components/schemas/recordsPage"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/usersWithRoles"
                }
              }
            }
          }
        ]
      },
      "usersForNonAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "username": {
            "$ref": "#/components/schemas/username"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "prefs": {
            "$ref": "#/components/schemas/email_preference"
          },
          "avatar_url": {
            "$ref": "#/components/schemas/avatar_url"
          },
          "preferences": {
            "$ref": "#/components/schemas/map_object"
          }
        },
        "required": [
          "id",
          "user_id",
          "username",
          "email",
          "first_name",
          "last_name"
        ]
      },
      "teamMembersPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/recordsPage"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/teamMembers"
                }
              }
            }
          }
        ]
      },
      "usersPageForNonAdmin": {
        "allOf": [
          {
            "$ref": "#/components/schemas/recordsPage"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-usersForNonAdmin"
                }
              }
            }
          }
        ]
      },
      "usersWithRolesForAdmin": {
        "type": "object",
        "$ref": "#/components/schemas/usersWithRoles"
      },
      "role": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "role_name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Role description"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "performanceProfile": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "schedule": {
            "$ref": "#/components/schemas/id"
          },
          "load_generators": {
            "type": "string"
          },
          "endpoints": {
            "type": "string"
          },
          "service_mesh": {
            "type": "string"
          },
          "concurrent_request": {
            "type": "integer"
          },
          "qps": {
            "type": "integer"
          },
          "duration": {
            "type": "string"
          },
          "last_run": {
            "$ref": "#/components/schemas/time"
          },
          "total_results": {
            "type": "integer"
          },
          "request_headers": {
            "type": "string"
          },
          "request_cookies": {
            "type": "string"
          },
          "request_body": {
            "type": "string"
          },
          "metadata": {
            "type": "map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "performanceProfilePage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "profiles": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-performanceProfile"
                }
              }
            }
          }
        ]
      },
      "performanceResult": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "test_start_time": {
            "$ref": "#/components/schemas/time"
          },
          "mesh": {
            "type": "string"
          },
          "runner_results": {
            "$ref": "#/components/schemas/map_object"
          },
          "deleted": {
            "type": "boolean"
          },
          "server_metrics": {
            "$ref": "#/components/schemas/map_object"
          },
          "server_board_config": {
            "$ref": "#/components/schemas/map_object"
          },
          "performance_profile": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "mesheryResultPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-performanceResult"
                }
              }
            }
          }
        ]
      },
      "schedule": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "cron_expression": {
            "type": "string"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "schedulePage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "profiles": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-schedule"
                }
              }
            }
          }
        ]
      },
      "k8sContext": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "auth": {
            "$ref": "#/components/schemas/map_object"
          },
          "cluster": {
            "$ref": "#/components/schemas/map_object"
          },
          "server": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          },
          "created_by": {
            "$ref": "#/components/schemas/id"
          },
          "meshery_instance_id": {
            "$ref": "#/components/schemas/id"
          },
          "kubernetes_server_id": {
            "$ref": "#/components/schemas/id"
          },
          "deployment_type": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "k8sContextPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "contexts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/k8sContext"
                }
              }
            }
          }
        ]
      },
      "k8sContextPersistResponse": {
        "properties": {
          "k8sContext": {
            "$ref": "#/components/schemas/schemas-k8sContext"
          },
          "inserted": {
            "type": "boolean"
          }
        }
      },
      "userToken": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "provider": {
            "$ref": "#/components/schemas/provider"
          },
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "purpose": {
            "type": "string"
          },
          "is_oauth": {
            "type": "boolean"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "tokenPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "tokens": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-userToken"
                }
              }
            }
          }
        ]
      },
      "credential": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "type": {
            "type": "string"
          },
          "secret": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "credentialsPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "credential": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-credential"
                }
              }
            }
          }
        ]
      },
      "smiResult": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "mesh_name": {
            "$ref": "#/components/schemas/text"
          },
          "mesh_version": {
            "$ref": "#/components/schemas/text"
          },
          "cases_passed": {
            "$ref": "#/components/schemas/text"
          },
          "passing_percentage": {
            "$ref": "#/components/schemas/text"
          },
          "status": {
            "$ref": "#/components/schemas/text"
          },
          "more_details": {
            "$ref": "#/components/schemas/detail"
          },
          "test_start_time": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "smiResultPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-smiResult"
                }
              }
            }
          }
        ]
      },
      "eventTrackerGroupedArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/eventTrackerGrouped"
        }
      },
      "eventsPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/recordsPage"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/eventResult"
                }
              }
            }
          }
        ]
      },
      "eventSummaryPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/recordsPage"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/eventSummary"
                }
              }
            }
          }
        ]
      },
      "recentActivityPage": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          }
        }
      },
      "accountOverview": {
        "properties": {
          "k8s_count": {
            "type": "integer"
          },
          "app_count": {
            "type": "integer"
          },
          "pattern_count": {
            "type": "integer"
          }
        }
      },
      "recentUsers": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "avatar_url": {
            "$ref": "#/components/schemas/avatar_url"
          }
        }
      },
      "recentUsersPage": {
        "properties": {
          "recent_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recentUsers"
            }
          }
        }
      },
      "capability": {
        "properties": {
          "provider_type": {
            "$ref": "#/components/schemas/provider",
            "description": "Provider type"
          },
          "package_version": {
            "$ref": "#/components/schemas/text",
            "description": "Package version"
          },
          "package_url": {
            "$ref": "#/components/schemas/text",
            "description": "Package url"
          },
          "provider_name": {
            "$ref": "#/components/schemas/text",
            "description": "Provider name"
          },
          "provider_description": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/text"
            }
          },
          "extensions": {
            "$ref": "#/components/schemas/capabilityExtension"
          },
          "capabilities": {
            "$ref": "#/components/schemas/capabilityGeneralCapability"
          },
          "restrictedAccess": {
            "$ref": "#/components/schemas/restrictedAccess"
          }
        }
      },
      "mesheryPatternResource": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Name"
          },
          "namepace": {
            "$ref": "#/components/schemas/text",
            "description": "Namespace"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Type"
          },
          "oam_type": {
            "$ref": "#/components/schemas/text",
            "description": "OAM type"
          },
          "deleted": {
            "type": "boolean"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "mesheryPatternResourcePage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-mesheryPatternResource"
                }
              }
            }
          }
        ]
      },
      "mesheryPattern": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "pattern_file": {
            "$ref": "#/components/schemas/text",
            "description": "Pattern file"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Pattern Name"
          },
          "location": {
            "$ref": "#/components/schemas/map_object"
          },
          "visibility": {
            "$ref": "#/components/schemas/text"
          },
          "source_type": {
            "$ref": "#/components/schemas/text",
            "description": "Source type (K8s manifest, Helm chart, Docker compose, Design)"
          },
          "source_content": {
            "type": "string",
            "format": "byte",
            "description": "Source content"
          },
          "catalog_data": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "mesheryPatternPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "patterns": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-mesheryPattern"
                }
              }
            }
          }
        ]
      },
      "mesheryDesignPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "designs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/mesheryPattern"
                }
              }
            }
          }
        ]
      },
      "catalogRequest": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "content_id": {
            "$ref": "#/components/schemas/id"
          },
          "content_name": {
            "$ref": "#/components/schemas/text"
          },
          "content_type": {
            "$ref": "#/components/schemas/catalogContentType",
            "description": "Catalog type (pattern / filter)"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "status": {
            "$ref": "#/components/schemas/text",
            "description": "Catalog request status (pending / approved / denied)"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "catalogRequestsPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "signup_data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/catalogRequest"
                }
              }
            }
          }
        ]
      },
      "mesheryFilter": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "filter_file": {
            "type": "string",
            "format": "byte",
            "description": "Filter file"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Filter Name"
          },
          "location": {
            "$ref": "#/components/schemas/map_object"
          },
          "visibility": {
            "$ref": "#/components/schemas/text"
          },
          "catalog_data": {
            "$ref": "#/components/schemas/map_object"
          },
          "config": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "mesheryFilterPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "filters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/mesheryFilter"
                }
              }
            }
          }
        ]
      },
      "mesheryApplication": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "application_file": {
            "$ref": "#/components/schemas/text",
            "description": "Application file"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Pattern Name"
          },
          "location": {
            "$ref": "#/components/schemas/map_object"
          },
          "visibility": {
            "$ref": "#/components/schemas/text"
          },
          "source_type": {
            "$ref": "#/components/schemas/text",
            "description": "Source type (K8s manifest, Helm chart, Docker compose)"
          },
          "source_content": {
            "type": "string",
            "format": "byte",
            "description": "Source content"
          },
          "catalog_data": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "mesheryApplicationPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "applications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-mesheryApplication"
                }
              }
            }
          }
        ]
      },
      "signupRequestsPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "signup_data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/signupData"
                }
              }
            }
          }
        ]
      },
      "mesheryInstance": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "description": "Connection id"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Connection name"
          },
          "server_id": {
            "$ref": "#/components/schemas/text",
            "description": "Connected server id"
          },
          "server_version": {
            "$ref": "#/components/schemas/text",
            "description": "Running server version"
          },
          "server_location": {
            "$ref": "#/components/schemas/text"
          },
          "server_build_sha": {
            "$ref": "#/components/schemas/text",
            "description": "Server build SHA"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          },
          "status": {
            "$ref": "#/components/schemas/text",
            "description": "Status"
          }
        }
      },
      "organization": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "country": {
            "$ref": "#/components/schemas/text"
          },
          "region": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/id",
            "description": "UUID of user who created organization"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        },
        "required": [
          "name"
        ]
      },
      "organizationsPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableOrganization"
            }
          }
        }
      },
      "subscription": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "org_ID": {
            "$ref": "#/components/schemas/id"
          },
          "plan_ID": {
            "$ref": "#/components/schemas/id"
          },
          "subscription_status": {
            "$ref": "#/components/schemas/subscriptionStatus"
          },
          "start_date": {
            "$ref": "#/components/schemas/time"
          },
          "end_date": {
            "$ref": "#/components/schemas/time"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "subscriptionsPage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resultsPage"
          },
          {
            "type": "object",
            "properties": {
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas-subscription"
                }
              }
            }
          }
        ]
      },
      "subscriptionPlan": {
        "type": "object",
        "$ref": "#/components/schemas/plan"
      },
      "plan": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/planName"
          },
          "cadence": {
            "$ref": "#/components/schemas/planCadence"
          },
          "price": {
            "type": "integer",
            "format": "int32",
            "$ref": "#/components/schemas/price"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        },
        "required": [
          "name",
          "price",
          "id"
        ]
      },
      "planPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/plan"
            }
          }
        }
      },
      "team": {
        "type": "object",
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id",
            "description": "Team ID"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Team name"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Team description"
          },
          "owner": {
            "$ref": "#/components/schemas/id",
            "description": "Team owner"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "availableTeam": {
        "type": "object",
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id",
            "description": "Team ID"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Team name"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Team description"
          },
          "owner": {
            "$ref": "#/components/schemas/text",
            "description": "Team owner"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "teams": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/schemas-team"
        }
      },
      "teamsPage": {
        "$ref": "#/components/schemas/teamPage"
      },
      "users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/user"
        }
      },
      "roles": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/schemas-role"
        }
      },
      "rolesPage": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/schemas-role"
            }
          }
        }
      },
      "roleNames": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "usersTeamsMapping": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "team_id": {
            "$ref": "#/components/schemas/id"
          },
          "role_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "teamsOrganizationsMapping": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "org_id": {
            "$ref": "#/components/schemas/id"
          },
          "team_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "usersOrganizationsMapping": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "organization_id": {
            "$ref": "#/components/schemas/id"
          },
          "role_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "rolesKeychainsMapping": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "keychain_id": {
            "$ref": "#/components/schemas/id"
          },
          "role_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "key": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "subcategory": {
            "$ref": "#/components/schemas/text"
          },
          "function": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          },
          "category": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          }
        }
      },
      "keysPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-key"
            }
          }
        }
      },
      "keychain": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "keychainFilter": {
        "properties": {
          "roleID": {
            "$ref": "#/components/schemas/id"
          }
        }
      },
      "keychainsPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "keychains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-keychain"
            }
          }
        }
      },
      "connection": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "description": "ID"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Name"
          },
          "credential_id": {
            "$ref": "#/components/schemas/id",
            "description": "Credential ID"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Type"
          },
          "sub_type": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Subtype"
          },
          "kind": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Kind"
          },
          "metadata": {
            "$ref": "#/components/schemas/map_object"
          },
          "status": {
            "description": "Connection Status",
            "type": "string",
            "enum": [
              "discovered",
              "registered",
              "connected",
              "ignored",
              "maintenance",
              "disconnected",
              "deleted",
              "notfound"
            ]
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "environment": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "organization_id": {
            "$ref": "#/components/schemas/id"
          },
          "owner": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "environmentPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-environment"
            }
          }
        }
      },
      "workspacesEnvironmentsMapping": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "environment_id": {
            "$ref": "#/components/schemas/id"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "workspacesTeamsMapping": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "team_id": {
            "$ref": "#/components/schemas/id"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "workspacesDesignsMapping": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "design_id": {
            "$ref": "#/components/schemas/id"
          },
          "workspace_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "workspace": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "organization_id": {
            "$ref": "#/components/schemas/id"
          },
          "owner": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "workspacePage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-workspace"
            }
          }
        }
      },
      "connectionPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-connection"
            }
          }
        }
      },
      "connectionsStatusPage": {
        "properties": {
          "connections_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/connectionStatusInfo"
            }
          }
        }
      },
      "badgeRequest": {
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "badges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/text"
            }
          }
        }
      },
      "userKeys": {
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-key"
            }
          },
          "total_count": {
            "type": "integer"
          }
        }
      },
      "badges": {
        "properties": {
          "badges": {
            "$ref": "#/components/schemas/badgesObject"
          },
          "total_count": {
            "type": "integer"
          }
        }
      },
      "meshmodelCategoriesPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/meshmodelCategory"
            }
          }
        }
      },
      "meshmodelModelsPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/meshmodelModel"
            }
          }
        }
      },
      "eventsAggregate": {
        "properties": {
          "audit": {
            "type": "integer",
            "description": "Number of audit events"
          },
          "summary": {
            "type": "integer",
            "description": "Number of summary events"
          }
        }
      },
      "text": {
        "type": "string"
      },
      "email": {
        "type": "string",
        "format": "email",
        "description": "email"
      },
      "id": {
        "type": "string",
        "format": "uuid",
        "x-go-type": "uuid.UUID",
        "x-go-type-import": {
          "path": "github.com/gofrs/uuid"
        },
        "x-oapi-codegen-extra-tags": {
          "db": "id"
        },
        "x-go-name": "ID"
      },
      "time": {
        "type": "string",
        "format": "date-time"
      },
      "schemas-team": {
        "type": "object",
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id",
            "description": "Team ID"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Team name"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Team description"
          },
          "owner": {
            "$ref": "#/components/schemas/id",
            "description": "Team owner"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "userInvite": {
        "properties": {
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schemas-team"
            }
          },
          "team_roles": {
            "type": "array",
            "description": "Team level roles (team admin)",
            "items": {
              "$ref": "#/components/schemas/text"
            }
          },
          "org_roles": {
            "type": "array",
            "description": "Organization level roles (organization admin)",
            "items": {
              "$ref": "#/components/schemas/text"
            }
          },
          "roles": {
            "type": "array",
            "description": "Provider level roles (kanvas, admin, curator)",
            "items": {
              "$ref": "#/components/schemas/text"
            }
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email"
        ]
      },
      "map_object": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "nullTime": {
        "properties": {
          "time": {
            "$ref": "#/components/schemas/time"
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "schemas-key": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "subcategory": {
            "$ref": "#/components/schemas/text"
          },
          "function": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          },
          "category": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          }
        }
      },
      "user_id": {
        "type": "string",
        "description": "user's email or username"
      },
      "provider": {
        "type": "string",
        "description": "One of (meshery-cloud, github, google)"
      },
      "avatar_url": {
        "type": "string",
        "description": "Link for profile picture"
      },
      "status": {
        "type": "string"
      },
      "bio": {
        "type": "string"
      },
      "accepted_terms_at": {
        "type": "string"
      },
      "schemas-roleNames": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "schemas-teams": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/schemas-team"
        }
      },
      "recordsPage": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "recordType": {
            "type": "string"
          }
        }
      },
      "username": {
        "type": "string"
      },
      "email_preference": {
        "type": "object",
        "properties": {
          "welcome_email": {
            "type": "boolean"
          },
          "notify_role_change": {
            "type": "boolean"
          }
        }
      },
      "organizationWithRoles": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "country": {
            "$ref": "#/components/schemas/text"
          },
          "region": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          },
          "role_names": {
            "$ref": "#/components/schemas/schemas-roleNames"
          }
        }
      },
      "teamsWithRoles": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          },
          "role_names": {
            "$ref": "#/components/schemas/schemas-roleNames"
          }
        }
      },
      "usersWithRoles": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "username": {
            "$ref": "#/components/schemas/username"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "role_names": {
            "$ref": "#/components/schemas/schemas-roleNames"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "last_login_time": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          },
          "prefs": {
            "$ref": "#/components/schemas/email_preference"
          },
          "avatar_url": {
            "$ref": "#/components/schemas/avatar_url"
          },
          "preferences": {
            "$ref": "#/components/schemas/map_object"
          },
          "organization_with_roles": {
            "$ref": "#/components/schemas/organizationWithRoles"
          },
          "teams_with_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/teamsWithRoles"
            }
          }
        },
        "required": [
          "id",
          "user_id",
          "username",
          "email",
          "first_name",
          "last_name",
          "status",
          "role_names",
          "created_at",
          "updated_at",
          "last_login_time",
          "deleted_at"
        ]
      },
      "teamMembers": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "username": {
            "$ref": "#/components/schemas/username"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "role_names": {
            "$ref": "#/components/schemas/schemas-roleNames"
          },
          "joined_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "last_login_time": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          },
          "prefs": {
            "$ref": "#/components/schemas/email_preference"
          },
          "avatar_url": {
            "$ref": "#/components/schemas/avatar_url"
          }
        },
        "required": [
          "id",
          "user_id",
          "username",
          "email",
          "first_name",
          "last_name",
          "status",
          "role_names",
          "joined_at",
          "updated_at",
          "last_login_time",
          "deleted_at"
        ]
      },
      "schemas-usersForNonAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "username": {
            "$ref": "#/components/schemas/username"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "prefs": {
            "$ref": "#/components/schemas/email_preference"
          },
          "avatar_url": {
            "$ref": "#/components/schemas/avatar_url"
          },
          "preferences": {
            "$ref": "#/components/schemas/map_object"
          }
        },
        "required": [
          "id",
          "user_id",
          "username",
          "email",
          "first_name",
          "last_name"
        ]
      },
      "user_uuid": {
        "type": "string",
        "format": "uuid",
        "x-go-type": "uuid.UUID",
        "x-go-type-import": {
          "path": "github.com/gofrs/uuid"
        },
        "x-oapi-codegen-extra-tags": {
          "db": "user_id"
        },
        "x-go-name": "UserID"
      },
      "system_id": {
        "type": "string",
        "format": "uuid",
        "x-go-type": "uuid.UUID",
        "x-go-type-import": {
          "path": "github.com/gofrs/uuid"
        },
        "x-oapi-codegen-extra-tags": {
          "db": "system_id"
        },
        "x-go-name": "SystemID"
      },
      "operation_id": {
        "type": "string",
        "format": "uuid",
        "x-go-type": "uuid.UUID",
        "x-go-type-import": {
          "path": "github.com/gofrs/uuid"
        },
        "x-oapi-codegen-extra-tags": {
          "db": "operation_id"
        },
        "x-go-name": "OperationID"
      },
      "created_at": {
        "description": "Timestamp when the resource was created.",
        "x-go-type": "time.Time",
        "type": "string",
        "format": "date-time",
        "x-oapi-codegen-extra-tags": {
          "db": "created_at"
        }
      },
      "updated_at": {
        "description": "Timestamp when the resource was updated.",
        "x-go-type": "time.Time",
        "type": "string",
        "format": "date-time",
        "x-oapi-codegen-extra-tags": {
          "db": "updated_at"
        }
      },
      "deleted_at": {
        "description": "Timestamp when the resource was deleted.",
        "x-go-type": "time.Time",
        "type": "string",
        "format": "date-time",
        "x-oapi-codegen-extra-tags": {
          "db": "deleted_at"
        }
      },
      "event": {
        "description": "Defines model for event_trackers",
        "properties": {
          "id": {
            "description": "UUID of the event.\n",
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_uuid",
            "description": "UUID of the user that initiated the event. In most cases this would be present, but not always.\n"
          },
          "system_id": {
            "description": "The system from which the request is sourced. In the case of Meshery Server, \nthe ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).\n",
            "$ref": "#/components/schemas/system_id"
          },
          "operation_id": {
            "description": "Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.  \n",
            "$ref": "#/components/schemas/operation_id"
          },
          "category": {
            "description": "Resource name on which the operation is invoked.\n",
            "type": "string",
            "example": "pattern",
            "x-oapi-codegen-extra-tags": {
              "db": "category"
            }
          },
          "action": {
            "description": "Action taken on the resource.\n",
            "type": "string",
            "example": "deployed",
            "x-oapi-codegen-extra-tags": {
              "db": "action"
            }
          },
          "status": {
            "description": "Status for the event. \n",
            "type": "string",
            "enum": [
              "read",
              "unread"
            ],
            "x-oapi-codegen-extra-tags": {
              "db": "status"
            }
          },
          "acted_upon": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the entity on which the event was performed.\n",
            "example": "110020-123230-434231-000213",
            "x-go-type": "uuid.UUID",
            "x-oapi-codegen-extra-tags": {
              "db": "acted_upon"
            }
          },
          "description": {
            "description": "A summary/receipt of event that occured.\n",
            "type": "string",
            "example": "“Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.",
            "x-oapi-codegen-extra-tags": {
              "db": "description"
            }
          },
          "severity": {
            "description": "A set of seven standard event levels.\n",
            "type": "string",
            "enum": [
              "emergency",
              "critical",
              "alert",
              "error",
              "warning",
              "debug",
              "informational",
              "success"
            ],
            "example": "info",
            "x-oapi-codegen-extra-tags": {
              "db": "severity"
            }
          },
          "metadata": {
            "description": "Contains meaningful information, specific to the type of event.\nStructure of metadata can be different for different events.\n",
            "type": "object",
            "x-go-type": "[]byte",
            "x-oapi-codegen-extra-tags": {
              "db": "metadata"
            }
          },
          "created_at": {
            "$ref": "#/components/schemas/created_at"
          },
          "updated_at": {
            "$ref": "#/components/schemas/updated_at"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/deleted_at"
          }
        },
        "required": [
          "id",
          "system_id",
          "operation_id",
          "category",
          "action",
          "status",
          "acted_upon",
          "description",
          "severity",
          "metadata",
          "created_at",
          "updated_at"
        ]
      },
      "roleHolderRequest": {
        "type": "object",
        "properties": {
          "role_names": {
            "$ref": "#/components/schemas/schemas-roleNames"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          }
        },
        "required": [
          "role_names",
          "email"
        ]
      },
      "schemas-role": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "role_name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Role description"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "schemas-keychain": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "resultsPage": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "resultType": {
            "type": "string"
          }
        }
      },
      "schemas-performanceProfile": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "schedule": {
            "$ref": "#/components/schemas/id"
          },
          "load_generators": {
            "type": "string"
          },
          "endpoints": {
            "type": "string"
          },
          "service_mesh": {
            "type": "string"
          },
          "concurrent_request": {
            "type": "integer"
          },
          "qps": {
            "type": "integer"
          },
          "duration": {
            "type": "string"
          },
          "last_run": {
            "$ref": "#/components/schemas/time"
          },
          "total_results": {
            "type": "integer"
          },
          "request_headers": {
            "type": "string"
          },
          "request_cookies": {
            "type": "string"
          },
          "request_body": {
            "type": "string"
          },
          "metadata": {
            "type": "map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "schemas-performanceResult": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "test_start_time": {
            "$ref": "#/components/schemas/time"
          },
          "mesh": {
            "type": "string"
          },
          "runner_results": {
            "$ref": "#/components/schemas/map_object"
          },
          "deleted": {
            "type": "boolean"
          },
          "server_metrics": {
            "$ref": "#/components/schemas/map_object"
          },
          "server_board_config": {
            "$ref": "#/components/schemas/map_object"
          },
          "performance_profile": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "schemas-schedule": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "cron_expression": {
            "type": "string"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "schemas-userToken": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "provider": {
            "$ref": "#/components/schemas/provider"
          },
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "purpose": {
            "type": "string"
          },
          "is_oauth": {
            "type": "boolean"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "schemas-credential": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "type": {
            "type": "string"
          },
          "secret": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "detail": {
        "properties": {
          "smi_specification": {
            "$ref": "#/components/schemas/text"
          },
          "smi_version": {
            "$ref": "#/components/schemas/text"
          },
          "time": {
            "$ref": "#/components/schemas/text"
          },
          "assertions": {
            "$ref": "#/components/schemas/text"
          },
          "result": {
            "$ref": "#/components/schemas/text"
          },
          "reason": {
            "$ref": "#/components/schemas/text"
          },
          "capability": {
            "$ref": "#/components/schemas/text"
          },
          "status": {
            "$ref": "#/components/schemas/text"
          }
        }
      },
      "schemas-smiResult": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "mesh_name": {
            "$ref": "#/components/schemas/text"
          },
          "mesh_version": {
            "$ref": "#/components/schemas/text"
          },
          "cases_passed": {
            "$ref": "#/components/schemas/text"
          },
          "passing_percentage": {
            "$ref": "#/components/schemas/text"
          },
          "status": {
            "$ref": "#/components/schemas/text"
          },
          "more_details": {
            "$ref": "#/components/schemas/detail"
          },
          "test_start_time": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "eventTrackerGrouped": {
        "properties": {
          "count": {
            "type": "integer"
          },
          "event_type": {
            "$ref": "#/components/schemas/text"
          },
          "dt": {
            "$ref": "#/components/schemas/time"
          },
          "week": {
            "$ref": "#/components/schemas/text"
          },
          "month": {
            "$ref": "#/components/schemas/text"
          },
          "year": {
            "$ref": "#/components/schemas/text"
          }
        }
      },
      "events_filter": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "action": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "severity": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "sort_on": {
            "type": "string",
            "description": "Field on which records are sorted"
          },
          "order": {
            "type": "string",
            "description": "order of sort asc/desc, default is asc"
          }
        },
        "required": [
          "provider",
          "category",
          "action",
          "severity",
          "limit",
          "offset",
          "sort_on",
          "order"
        ]
      },
      "eventResult": {
        "description": "Defines model for event_result",
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/user_uuid",
            "description": "UUID of the user that initiated the event. In most cases this would be present, but not always.\n"
          },
          "system_id": {
            "description": "The system from which the request is sourced. In the case of Meshery Server, \nthe ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).\n",
            "$ref": "#/components/schemas/system_id"
          },
          "category": {
            "description": "Resource name on which the operation is invoked.\n",
            "type": "string",
            "example": "pattern",
            "x-oapi-codegen-extra-tags": {
              "db": "category"
            }
          },
          "action": {
            "description": "Action taken on the resource.\n",
            "type": "string",
            "example": "deployed",
            "x-oapi-codegen-extra-tags": {
              "db": "action"
            }
          },
          "description": {
            "description": "A summary/receipt of event that occured.\n",
            "type": "string",
            "example": "“Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.",
            "x-oapi-codegen-extra-tags": {
              "db": "description"
            }
          },
          "first_name": {
            "description": "First name of the user that initiated the event.",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the user that initiated the event.",
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "provider": {
            "$ref": "#/components/schemas/provider"
          },
          "created_at": {
            "$ref": "#/components/schemas/created_at"
          }
        }
      },
      "eventSummary": {
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user's email or username"
          },
          "provider": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string",
            "description": "First Name"
          },
          "last_name": {
            "type": "string",
            "description": "Last Name"
          },
          "activity_count": {
            "type": "integer"
          },
          "login_count": {
            "type": "integer"
          },
          "signup_count": {
            "type": "integer"
          },
          "perf_results_count": {
            "type": "integer"
          },
          "smi_results_count": {
            "type": "integer"
          },
          "meshery_apps_count": {
            "type": "integer"
          },
          "meshery_patterns_count": {
            "type": "integer"
          },
          "meshery_filters_count": {
            "type": "integer"
          },
          "last_login_time": {
            "type": "string",
            "format": "data-time",
            "x-go-type": "time.Time"
          }
        },
        "required": [
          "user_id",
          "provider",
          "email",
          "first_name",
          "last_name",
          "activity_count",
          "login_count",
          "signup_count",
          "perf_results_count",
          "smi_results_count",
          "meshery_apps_count",
          "meshery_patterns_count",
          "meshery_filters_count",
          "last_login_time"
        ]
      },
      "capabilityNavigatorExtension": {
        "properties": {
          "title": {
            "$ref": "#/components/schemas/text",
            "description": "Title"
          },
          "on_click_callback": {
            "type": "integer"
          },
          "href": {
            "properties": {
              "uri": {
                "type": "string",
                "format": "uri"
              },
              "external": {
                "type": "boolean"
              }
            }
          },
          "component": {
            "$ref": "#/components/schemas/text",
            "description": "Component"
          },
          "icon": {
            "$ref": "#/components/schemas/text",
            "description": "Icon link"
          },
          "link": {
            "$ref": "#/components/schemas/text",
            "description": "link",
            "format": "uri"
          },
          "show": {
            "type": "boolean",
            "description": "Controls whether to show the extension or not"
          },
          "isBeta": {
            "type": "boolean",
            "description": "Controls whether to show the isBeta label or not on title"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Extension type"
          },
          "allowedTo": {
            "type": "object"
          }
        }
      },
      "capabilityUserPrefExtension": {
        "properties": {
          "component": {
            "$ref": "#/components/schemas/text",
            "description": "Component"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Extension type"
          }
        }
      },
      "capabilityGraphQLExtension": {
        "properties": {
          "component": {
            "$ref": "#/components/schemas/text",
            "description": "Component"
          },
          "path": {
            "$ref": "#/components/schemas/text",
            "description": "Path"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Extension type"
          }
        }
      },
      "capabilitiesAccountExtension": {
        "properties": {
          "title": {
            "$ref": "#/components/schemas/text",
            "description": "Title"
          },
          "on_click_callback": {
            "type": "integer"
          },
          "href": {
            "properties": {
              "uri": {
                "type": "string",
                "format": "uri"
              },
              "external": {
                "type": "boolean"
              }
            }
          },
          "component": {
            "$ref": "#/components/schemas/text",
            "description": "Component"
          },
          "link": {
            "$ref": "#/components/schemas/text",
            "description": "link",
            "format": "uri"
          },
          "show": {
            "type": "boolean",
            "description": "Controls whether to show the extension or not"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Extension type"
          }
        }
      },
      "capabilityCollaboratorsExtension": {
        "properties": {
          "component": {
            "$ref": "#/components/schemas/text",
            "description": "Component"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Extension type"
          }
        }
      },
      "capabilityExtension": {
        "properties": {
          "navigator": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/capabilityNavigatorExtension"
            }
          },
          "user_prefs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/capabilityUserPrefExtension"
            }
          },
          "graphql": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/capabilityGraphQLExtension"
            }
          },
          "account": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/capabilitiesAccountExtension"
            }
          },
          "collaborator": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/capabilityCollaboratorsExtension"
            }
          }
        }
      },
      "capabilityGeneralCapability": {
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/text",
            "description": "Feature name"
          },
          "endpoint": {
            "$ref": "#/components/schemas/text"
          }
        }
      },
      "restrictedAccess": {
        "properties": {
          "isMesheryUIRestricted": {
            "type": "boolean"
          },
          "allowedComponents": {
            "properties": {
              "navigator": {
                "type": "object"
              },
              "header": {
                "type": "object"
              }
            }
          }
        }
      },
      "schemas-mesheryPatternResource": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Name"
          },
          "namepace": {
            "$ref": "#/components/schemas/text",
            "description": "Namespace"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Type"
          },
          "oam_type": {
            "$ref": "#/components/schemas/text",
            "description": "OAM type"
          },
          "deleted": {
            "type": "boolean"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "source_content": {
        "type": "string",
        "format": "byte",
        "description": "Source content"
      },
      "schemas-mesheryPattern": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "pattern_file": {
            "$ref": "#/components/schemas/text",
            "description": "Pattern file"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Pattern Name"
          },
          "location": {
            "$ref": "#/components/schemas/map_object"
          },
          "visibility": {
            "$ref": "#/components/schemas/text"
          },
          "source_type": {
            "$ref": "#/components/schemas/text",
            "description": "Source type (K8s manifest, Helm chart, Docker compose, Design)"
          },
          "source_content": {
            "type": "string",
            "format": "byte",
            "description": "Source content"
          },
          "catalog_data": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "mesheryPatternRequestBody": {
        "properties": {
          "url": {
            "$ref": "#/components/schemas/text"
          },
          "path": {
            "$ref": "#/components/schemas/text"
          },
          "save": {
            "type": "boolean"
          },
          "pattern_data": {
            "$ref": "#/components/schemas/schemas-mesheryPattern"
          }
        }
      },
      "deletePatternModel": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Pattern name"
          }
        }
      },
      "mesheryPatternDeleteRequestBody": {
        "properties": {
          "patterns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deletePatternModel"
            }
          }
        }
      },
      "catalogContentType": {
        "type": "string",
        "enum": [
          "pattern",
          "filter"
        ]
      },
      "mesheryCatalogRequestBody": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "catalog_type": {
            "$ref": "#/components/schemas/catalogContentType",
            "description": "Catalog type (pattern / filter)"
          },
          "catalog_data": {
            "$ref": "#/components/schemas/map_object"
          }
        }
      },
      "mesheryFilterRequestBody": {
        "properties": {
          "url": {
            "$ref": "#/components/schemas/text"
          },
          "path": {
            "$ref": "#/components/schemas/text"
          },
          "save": {
            "type": "boolean"
          },
          "filter_data": {
            "$ref": "#/components/schemas/mesheryFilter"
          }
        }
      },
      "emails": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/email"
        }
      },
      "designShare": {
        "properties": {
          "emails": {
            "$ref": "#/components/schemas/emails"
          },
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "content_type": {
            "type": "string"
          },
          "share": {
            "type": "boolean"
          }
        },
        "required": [
          "emails",
          "id",
          "contentType",
          "share"
        ]
      },
      "filter_file": {
        "type": "string",
        "format": "byte",
        "description": "Filter file"
      },
      "schemas-mesheryApplication": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "application_file": {
            "$ref": "#/components/schemas/text",
            "description": "Application file"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Pattern Name"
          },
          "location": {
            "$ref": "#/components/schemas/map_object"
          },
          "visibility": {
            "$ref": "#/components/schemas/text"
          },
          "source_type": {
            "$ref": "#/components/schemas/text",
            "description": "Source type (K8s manifest, Helm chart, Docker compose)"
          },
          "source_content": {
            "type": "string",
            "format": "byte",
            "description": "Source content"
          },
          "catalog_data": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "mesheryApplicationRequestBody": {
        "properties": {
          "url": {
            "$ref": "#/components/schemas/text"
          },
          "path": {
            "$ref": "#/components/schemas/text"
          },
          "save": {
            "type": "boolean"
          },
          "application_data": {
            "$ref": "#/components/schemas/schemas-mesheryApplication"
          },
          "source_type": {
            "$ref": "#/components/schemas/text",
            "description": "Source type (K8s manifest, Helm chart, Docker compose)"
          }
        }
      },
      "signupData": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "first_name": {
            "$ref": "#/components/schemas/text",
            "description": "First Name"
          },
          "last_name": {
            "$ref": "#/components/schemas/text",
            "description": "Last Name"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "occupation": {
            "$ref": "#/components/schemas/text",
            "description": "Occupation"
          },
          "organization": {
            "$ref": "#/components/schemas/text",
            "description": "Organization"
          },
          "role": {
            "$ref": "#/components/schemas/text",
            "description": "Role in organization"
          },
          "form_type": {
            "$ref": "#/components/schemas/text",
            "description": "Form Type (Kanvas or Playground)"
          },
          "status": {
            "$ref": "#/components/schemas/text",
            "description": "Status (approved / denied)"
          },
          "task_id": {
            "$ref": "#/components/schemas/text",
            "description": "ClickUp task id"
          },
          "task_link": {
            "$ref": "#/components/schemas/text",
            "description": "ClickUp task link"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "schemas-connection": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "description": "ID"
          },
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Name"
          },
          "credential_id": {
            "$ref": "#/components/schemas/id",
            "description": "Credential ID"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Type"
          },
          "sub_type": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Subtype"
          },
          "kind": {
            "$ref": "#/components/schemas/text",
            "description": "Connection Kind"
          },
          "metadata": {
            "$ref": "#/components/schemas/map_object"
          },
          "status": {
            "description": "Connection Status",
            "type": "string",
            "enum": [
              "discovered",
              "registered",
              "connected",
              "ignored",
              "maintenance",
              "disconnected",
              "deleted",
              "notfound"
            ]
          },
          "user_id": {
            "$ref": "#/components/schemas/id"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "connectionPayload": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Name"
          },
          "kind": {
            "$ref": "#/components/schemas/text",
            "description": "Kind"
          },
          "type": {
            "$ref": "#/components/schemas/text",
            "description": "Connection type"
          },
          "sub_type": {
            "$ref": "#/components/schemas/text",
            "description": "Connection subtype"
          },
          "credential_secret": {
            "$ref": "#/components/schemas/map_object"
          },
          "metadata": {
            "$ref": "#/components/schemas/map_object"
          },
          "status": {
            "$ref": "#/components/schemas/text",
            "description": "Status of the connection"
          }
        }
      },
      "connectionStatusInfo": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/text",
            "description": "Connection status"
          },
          "count": {
            "type": "integer",
            "description": "Number of connections having the status"
          }
        }
      },
      "meshmodelModel": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "version": {
            "$ref": "#/components/schemas/text"
          },
          "display_name": {
            "$ref": "#/components/schemas/text"
          },
          "category_id": {
            "$ref": "#/components/schemas/id"
          },
          "metadata": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "meshmodelCategory": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "metadata": {
            "$ref": "#/components/schemas/map_object"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "schemas-k8sContext": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "auth": {
            "$ref": "#/components/schemas/map_object"
          },
          "cluster": {
            "$ref": "#/components/schemas/map_object"
          },
          "server": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/id"
          },
          "created_by": {
            "$ref": "#/components/schemas/id"
          },
          "meshery_instance_id": {
            "$ref": "#/components/schemas/id"
          },
          "kubernetes_server_id": {
            "$ref": "#/components/schemas/id"
          },
          "deployment_type": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "availableOrganization": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "country": {
            "$ref": "#/components/schemas/text"
          },
          "region": {
            "$ref": "#/components/schemas/text"
          },
          "owner": {
            "$ref": "#/components/schemas/text",
            "description": "UserID of user who created organization"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "organizationPayload": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "country": {
            "$ref": "#/components/schemas/text"
          },
          "region": {
            "$ref": "#/components/schemas/text"
          }
        }
      },
      "teamPayload": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Team name"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Team description"
          },
          "notify_team_update": {
            "type": "boolean",
            "description": "Notify team members about team update"
          }
        }
      },
      "teamPage": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "page_size": {
            "type": "integer"
          },
          "total_count": {
            "type": "integer"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/availableTeam"
            }
          }
        }
      },
      "subscriptionStatus": {
        "type": "string",
        "enum": [
          "active",
          "closed",
          "overdue",
          "expired"
        ],
        "description": "Status of the subscription"
      },
      "schemas-subscription": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "org_ID": {
            "$ref": "#/components/schemas/id"
          },
          "plan_ID": {
            "$ref": "#/components/schemas/id"
          },
          "subscription_status": {
            "$ref": "#/components/schemas/subscriptionStatus"
          },
          "start_date": {
            "$ref": "#/components/schemas/time"
          },
          "end_date": {
            "$ref": "#/components/schemas/time"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/time"
          }
        }
      },
      "planName": {
        "type": "string",
        "enum": [
          "personal",
          "team",
          "enterprise"
        ],
        "description": "A list of subscription plans offered for customers"
      },
      "planCadence": {
        "type": "string",
        "enum": [
          "annually",
          "monthly",
          "none"
        ]
      },
      "price": {
        "type": "integer",
        "format": "int32"
      },
      "planRequestBody": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/planName"
          },
          "cadence": {
            "$ref": "#/components/schemas/planCadence"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          }
        }
      },
      "badge": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "label": {
            "$ref": "#/components/schemas/text"
          },
          "svg_location": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "badgesObject": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/badge"
        }
      },
      "schemas-environment": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "organization_id": {
            "$ref": "#/components/schemas/id"
          },
          "owner": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "environmentPayload": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Name"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Environment description"
          },
          "OrganizationID": {
            "$ref": "#/components/schemas/id",
            "description": "Organization ID"
          }
        },
        "required": [
          "name",
          "organizationID"
        ]
      },
      "schemas-workspace": {
        "properties": {
          "ID": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/text"
          },
          "description": {
            "$ref": "#/components/schemas/text"
          },
          "organization_id": {
            "$ref": "#/components/schemas/id"
          },
          "owner": {
            "$ref": "#/components/schemas/text"
          },
          "created_at": {
            "$ref": "#/components/schemas/time"
          },
          "updated_at": {
            "$ref": "#/components/schemas/time"
          },
          "deleted_at": {
            "$ref": "#/components/schemas/nullTime"
          }
        }
      },
      "workspacePayload": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Name"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Environment description"
          },
          "organization_id": {
            "$ref": "#/components/schemas/id",
            "description": "Organization ID"
          }
        },
        "required": [
          "name",
          "organization_id"
        ]
      },
      "workspaceUpdatePayload": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/text",
            "description": "Name of workspace"
          },
          "description": {
            "$ref": "#/components/schemas/text",
            "description": "Environment description"
          },
          "organization_id": {
            "$ref": "#/components/schemas/id",
            "description": "Organization ID"
          }
        },
        "required": [
          "organization_id"
        ]
      },
      "deleteOn": {
        "type": "string",
        "enum": [
          "self",
          "bulk"
        ]
      },
      "bulkDelete": {
        "properties": {
          "user_ids": {
            "$ref": "#/components/schemas/id"
          },
          "user_emails": {
            "$ref": "#/components/schemas/emails"
          }
        },
        "required": [
          "user_ids",
          "user_emails"
        ]
      },
      "empty": {
        "description": "Body for empty request",
        "type": "object",
        "properties": {}
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "description": "Unique identifier",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "resultId": {
        "name": "result_id",
        "in": "path",
        "description": "Result id",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "serverId": {
        "name": "mesheryServerID",
        "in": "path",
        "description": "Meshery server ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "connectionId": {
        "name": "connectionId",
        "in": "path",
        "description": "Connection ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "environmentId": {
        "name": "environmentId",
        "in": "path",
        "description": "Environment ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "workspaceId": {
        "name": "workspaceId",
        "in": "path",
        "description": "Workspace ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "designId": {
        "name": "designId",
        "in": "path",
        "description": "Design ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "instanceId": {
        "name": "mesheryInstanceID",
        "in": "path",
        "description": "Meshery instance ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "contextId": {
        "name": "contextID",
        "in": "path",
        "description": "Meshery context ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "userId": {
        "name": "userId",
        "in": "path",
        "description": "User's user_id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "orgID": {
        "name": "orgID",
        "in": "path",
        "description": "User's organization ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "orgIDQuery": {
        "name": "orgID",
        "in": "query",
        "description": "User's organization ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "subscriptionId": {
        "name": "subscriptionId",
        "in": "path",
        "description": "Subscription Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "organizationId": {
        "name": "organizationId",
        "in": "path",
        "description": "Organization Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "planId": {
        "name": "planId",
        "in": "path",
        "description": "Plan Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "keychainId": {
        "name": "keychainID",
        "in": "path",
        "description": "Keychain Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "credentialId": {
        "name": "credential_id",
        "in": "query",
        "description": "credential Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "all": {
        "name": "all",
        "in": "query",
        "description": "Get all possible entries",
        "schema": {
          "type": "boolean"
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Get responses by page",
        "schema": {
          "type": "string"
        }
      },
      "pagesize": {
        "name": "pagesize",
        "in": "query",
        "description": "Get responses by pagesize",
        "schema": {
          "type": "string"
        }
      },
      "pagesizeWithAll": {
        "name": "pagesize",
        "in": "query",
        "description": "Get responses by pagesize (pass all to get all responses)",
        "schema": {
          "type": "string"
        }
      },
      "order": {
        "name": "order",
        "in": "query",
        "description": "Get ordered responses",
        "schema": {
          "type": "string"
        }
      },
      "visibility": {
        "name": "visibility",
        "in": "query",
        "description": "Get responses based on visibility - private, public or published",
        "schema": {
          "type": "string"
        }
      },
      "search": {
        "name": "search",
        "in": "query",
        "description": "Get responses that match search param value",
        "schema": {
          "type": "string"
        }
      },
      "filter": {
        "name": "filter",
        "in": "query",
        "description": "Get filtered reponses",
        "schema": {
          "type": "string"
        }
      },
      "eventsFilter": {
        "name": "filter",
        "in": "query",
        "description": "Filter for retrieving events",
        "schema": {
          "$ref": "#/components/schemas/events_filter"
        }
      },
      "requestFilter": {
        "name": "filter",
        "in": "query",
        "description": "Filter for catalog requests",
        "schema": {
          "properties": {
            "id": {
              "$ref": "#/components/schemas/id"
            },
            "status": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "isOAuth": {
        "name": "isOAuth",
        "in": "query",
        "description": "To get OAuth tokens as well",
        "schema": {
          "type": "string"
        }
      },
      "name": {
        "name": "name",
        "in": "query",
        "description": "Name of the resource",
        "schema": {
          "type": "string"
        }
      },
      "purpose": {
        "name": "purpose",
        "in": "query",
        "description": "Purpose for which token is generated",
        "schema": {
          "type": "string"
        }
      },
      "cumulative": {
        "name": "cumulative",
        "in": "query",
        "description": "Cumulative events",
        "schema": {
          "type": "string"
        }
      },
      "mesheryVersion": {
        "name": "meshery-version",
        "in": "path",
        "description": "meshery version",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "os": {
        "name": "os",
        "in": "query",
        "description": "user's os",
        "schema": {
          "type": "string"
        }
      },
      "playground": {
        "name": "playground",
        "in": "query",
        "description": "Is playground mode",
        "schema": {
          "type": "string"
        }
      },
      "namespace": {
        "name": "namespace",
        "in": "query",
        "description": "Namespace",
        "schema": {
          "type": "string"
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "description": "Type",
        "schema": {
          "type": "string"
        }
      },
      "oamType": {
        "name": "oamType",
        "in": "query",
        "description": "OAM type",
        "schema": {
          "type": "string"
        }
      },
      "connectionKind": {
        "name": "connectionKind",
        "in": "path",
        "description": "Connection kind (eg: Meshery)",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "teamId": {
        "name": "teamId",
        "in": "path",
        "description": "Team's teamId",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "roleId": {
        "name": "roleId",
        "in": "path",
        "description": "Role's role_id",
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "required": true
      },
      "catalogContentType": {
        "in": "path",
        "required": true,
        "name": "type",
        "description": "Catalog content type",
        "schema": {
          "$ref": "#/components/schemas/catalogContentType"
        }
      },
      "deleteOn": {
        "in": "path",
        "required": true,
        "name": "delete_on",
        "description": "Defines on whom the delete operation is to be performed",
        "schema": {
          "$ref": "#/components/schemas/deleteOn"
        }
      },
      "tokenName": {
        "in": "query",
        "required": true,
        "name": "token_name",
        "description": "Name of the token",
        "schema": {
          "$ref": "#/components/schemas/text"
        }
      },
      "tokenId": {
        "in": "query",
        "required": true,
        "name": "token_id",
        "description": "ID of the token",
        "schema": {
          "$ref": "#/components/schemas/id"
        }
      },
      "keyId": {
        "in": "path",
        "required": true,
        "name": "keyId",
        "description": "key ID",
        "schema": {
          "$ref": "#/components/schemas/id"
        }
      }
    },
    "requestBodies": {
      "mapObject": {
        "description": "Body of type map",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/map_object"
            }
          }
        }
      },
      "user": {
        "description": "Body for upserting user",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/user"
            }
          }
        }
      },
      "userInvite": {
        "description": "Body for user invite request",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/userInvite"
            }
          }
        }
      },
      "userPrefs": {
        "description": "Body for upserting user preferences",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/map_object"
            }
          }
        }
      },
      "designShare": {
        "description": "Body for sharing design",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/designShare"
            }
          }
        }
      },
      "deleteUsers": {
        "description": "Body for delete of user accounts",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/bulkDelete"
                },
                {
                  "$ref": "#/components/schemas/empty"
                }
              ]
            }
          }
        }
      },
      "roleHolderRequest": {
        "description": "Body for assigning role to the user",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/roleHolderRequest"
            }
          }
        }
      },
      "role": {
        "description": "Body for editing role of the user",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/usersWithRoles"
            }
          }
        }
      },
      "bulkRoles": {
        "description": "Body for editing role of the users in bulk",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/usersWithRoles"
              }
            }
          }
        }
      },
      "performanceProfile": {
        "description": "Body for upserting performance profile",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/performanceProfile"
            }
          }
        }
      },
      "performanceResult": {
        "description": "Body for upserting performance result",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/performanceResult"
            }
          }
        }
      },
      "smiResult": {
        "description": "Body for upserting SMI result",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/smiResult"
            }
          }
        }
      },
      "schedule": {
        "description": "Body for upserting scheduling",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/schedule"
            }
          }
        }
      },
      "k8sContext": {
        "description": "Body for upserting k8s context",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/k8sContext"
            }
          }
        }
      },
      "credential": {
        "description": "Body for user credential",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/credential"
            }
          }
        }
      },
      "userToken": {
        "description": "Body for user token",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/userToken"
            }
          }
        }
      },
      "mesheryPatternResource": {
        "description": "Body for upserting meshery pattern resource",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mesheryPatternResource"
            }
          }
        }
      },
      "mesheryPatternRequestBody": {
        "description": "Body for upserting meshery pattern",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mesheryPatternRequestBody"
            }
          }
        }
      },
      "mesheryCatalogRequestBody": {
        "description": "Body for publishing catalog",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mesheryCatalogRequestBody"
            }
          }
        }
      },
      "mesheryCloneRequestBody": {
        "description": "Body for cloning design",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        }
      },
      "mesheryPatternDeleteRequestBody": {
        "description": "Body for pattern delete request",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mesheryPatternDeleteRequestBody"
            }
          }
        }
      },
      "mesheryFilterRequestBody": {
        "description": "Body for upserting meshery filter",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mesheryFilterRequestBody"
            }
          }
        }
      },
      "mesheryApplicationRequestBody": {
        "description": "Body for upserting meshery application",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mesheryApplicationRequestBody"
            }
          }
        }
      },
      "mesheryApplicationSourceContent": {
        "description": "Body for upserting meshery application source content",
        "required": true,
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/source_content"
            }
          }
        }
      },
      "mesheryPatternSourceContent": {
        "description": "Body for upserting meshery pattern source content",
        "required": true,
        "content": {
          "text/plain": {
            "schema": {
              "$ref": "#/components/schemas/source_content"
            }
          }
        }
      },
      "signupData": {
        "description": "Body for updating user signup request",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/signupData"
            }
          }
        }
      },
      "connectionPayload": {
        "description": "Body for registering with Meshery Cloud",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/connectionPayload"
            }
          }
        }
      },
      "mesheryInstance": {
        "description": "Body for updating connection of kind Meshery with Meshery Cloud",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mesheryInstance"
            }
          }
        }
      },
      "plan": {
        "description": "Body for upserting plan of kind Meshery with Meshery Cloud",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/planRequestBody"
            }
          }
        }
      },
      "team": {
        "description": "Body for adding a new team",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/team"
            }
          }
        }
      },
      "organizationPayload": {
        "description": "Body for upserting organization",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/organizationPayload"
            }
          }
        }
      },
      "teamPayload": {
        "description": "Body for upserting teams",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/teamPayload"
            }
          }
        }
      },
      "keyPayload": {
        "description": "Body for creating key",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/key"
            }
          }
        }
      },
      "keychainPayload": {
        "description": "Body for creating keychain",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/keychain"
            }
          }
        }
      },
      "badgeRequestPayload": {
        "description": "Body for un/assigning badges",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/badgeRequest"
            }
          }
        }
      },
      "environmentPayload": {
        "description": "Body for creating environment",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/environmentPayload"
            }
          }
        }
      },
      "workspacePayload": {
        "description": "Body for creating workspace",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/workspacePayload"
            }
          }
        }
      },
      "workspaceUpdatePayload": {
        "description": "Body for updating workspace",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/workspaceUpdatePayload"
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "ok",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "201": {
        "description": "",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "400": {
        "description": "Invalid request body or request param",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "401": {
        "description": "Expired JWT token used or insufficient privilege",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "404": {
        "description": "Result not found",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "409": {
        "description": "Publish request already exists",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/api/identity/orgs/{orgID}/users/invite": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "HandleUserInvite",
        "summary": "User Invite",
        "description": "Send invitation request to users",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userInvite"
        },
        "responses": {
          "200": {
            "description": "Invitation sent"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/preferences": {
      "put": {
        "tags": [
          "users"
        ],
        "operationId": "UpdateUserPreference",
        "summary": "User Preference",
        "description": "Upsert user preferences",
        "requestBody": {
          "$ref": "#/components/requestBodies/userPrefs"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201",
            "description": "Preferences updated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/users/keys": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUserKeys",
        "summary": "Get User Keys",
        "description": "Get all keys based on roles assigned to user",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user keys based on roles assigned to user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userKeys"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/profile/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUserById",
        "summary": "Get User by ID",
        "description": "Get specific user by user id",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user with given user_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/self": {
      "delete": {
        "tags": [
          "users"
        ],
        "operationId": "DeleteOwnAccount",
        "summary": "Delete users",
        "description": "Delete own account. Any user can perform this action.",
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/{userId}": {
      "delete": {
        "tags": [
          "users"
        ],
        "operationId": "DeleteUsers",
        "summary": "Delete users",
        "description": "Delete users account based on user_id. For Provider Admin use case only.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity/orgs/{orgID}/users/bulk\"": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "BulkDeleteUsers",
        "summary": "Bulk Delete users",
        "description": "Bulk delete users account based on user_id for a give org. For Provider Admin use case only.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/users": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUsersForOrg",
        "summary": "Get All users for a given org",
        "description": "Get All users for a given org",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all user with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/usersPageForAdmin"
                    },
                    {
                      "$ref": "#/components/schemas/teamMembersPage"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUsers",
        "summary": "Get All users (for public view)",
        "description": "Get All users",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all user with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersPageForNonAdmin"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/profile/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUserProfileById",
        "summary": "Get user profile by Id",
        "description": "Get user profile of given user Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user with given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/profile": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUser",
        "summary": "Get User details",
        "description": "Get user details for logged in user",
        "responses": {
          "200": {
            "description": "user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "operationId": "UpdateProfile",
        "summary": "Update Profile",
        "description": "Update user profile data (also updates kratos identity)",
        "requestBody": {
          "$ref": "#/components/requestBodies/user"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/profile/details": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetProfileOverview",
        "summary": "Profile Overview",
        "description": "Get Profile overview for logged in user",
        "responses": {
          "200": {
            "description": "user account overview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountOverview"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/{user_id}/profile/activity": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUserActivity",
        "summary": "User Activity",
        "description": "Get user's most recent activity",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "UUID of User",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "user activity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recentActivityPage"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/identity/users/online": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetRecentlyOnlineUsers",
        "summary": "Online users",
        "description": "Get info of active / online users in last 24 hours",
        "responses": {
          "200": {
            "description": "active users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/recentUsers"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/:orgID/users/online": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetRecentlyOnlineUsersForOrg",
        "summary": "Get recently online users for org",
        "description": "Get info of active / online users for an org in last 24 hours",
        "responses": {
          "200": {
            "description": "active users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/recentUsers"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/roles": {
      "post": {
        "tags": [
          "roles"
        ],
        "operationId": "AddRoleHolder",
        "deprecated": true,
        "summary": "Assign role",
        "description": "Assign role to user",
        "requestBody": {
          "$ref": "#/components/requestBodies/roleHolderRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/:orgID/roles": {
      "put": {
        "tags": [
          "roles"
        ],
        "operationId": "BulkEditRoleHolder",
        "summary": "Bulk Edit Role",
        "description": "Edit roles of user in bulk",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/bulkRoles"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "operationId": "GetAllRoles",
        "summary": "Get All Roles",
        "description": "Get All supported roles",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/all"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rolesPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "roles"
        ],
        "operationId": "UpsertRoles",
        "summary": "Upsert roles",
        "description": "A new role is created if id is not provided in the request body. To update an existing role pass the id of the role in request body.",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "description": "Upserted roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roles"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/roles/{roleId}/keychains/{keychainID}": {
      "post": {
        "tags": [
          "roles"
        ],
        "description": "Add keychain to roles",
        "summary": "Add keychain to roles",
        "operationId": "AddKeychainToRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "$ref": "#/components/parameters/keychainId"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rolesKeychainsMapping"
                }
              }
            },
            "description": "organization updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "description": "Delete keychain to roles",
        "summary": "Delete keychain from roles",
        "operationId": "DeleteKeychainFromRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "$ref": "#/components/parameters/keychainId"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rolesKeychainsMapping"
                }
              }
            },
            "description": "organization updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/roles/{roleId}/keychains": {
      "get": {
        "tags": [
          "roles"
        ],
        "description": "GetKeychainByRoleId",
        "summary": "Get keychain by role ID",
        "operationId": "GetKeychainToRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/keychainsPage"
                }
              }
            },
            "description": "organization updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/roles/{id}": {
      "delete": {
        "tags": [
          "roles"
        ],
        "operationId": "DeleteRole",
        "summary": "Delete Role",
        "description": "Edit roles of user in bulk",
        "parameters": [
          {
            "$ref": "#/components/parameters/id",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Deleted roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/smp/performance/profiles": {
      "get": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "SMPDashboardPerfProfiles",
        "summary": "Performance Profiles",
        "description": "Get Performance Profiles for SMP Dashboard",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/smp/performance/profiles/{id}/results": {
      "get": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "SMPDashboardTestResults",
        "summary": "Performance Profiles Results by ID",
        "description": "Get Performance Profiles results by ID for SMP Dashboard",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "description": "Invalid path parameter \"id\"",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/performance/profiles": {
      "post": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "UpsertPerformanceProfile",
        "summary": "Upsert Performance Profiles",
        "description": "Update performance profiles or create a new performance profile if no id is provided",
        "requestBody": {
          "$ref": "#/components/requestBodies/performanceProfile"
        },
        "responses": {
          "201": {
            "description": "updated performance profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/performanceProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "GetPerformanceProfiles",
        "summary": "Get Performance Profiles",
        "description": "Get performance profiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Performance Profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/performanceProfilePage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/performance/profiles/{id}": {
      "get": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "GetPerformanceProfile",
        "summary": "Performance Profile by Id",
        "description": "Get Performance Profile by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Performance Profile for provided performance profile id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/performanceProfile"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "DeletePerformanceProfile",
        "summary": "Delete Performance Profiles",
        "description": "Delete performance profiles by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted Performance Profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/performanceProfile"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Performance profile not found"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/performance/profiles/{id}/results": {
      "get": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "GetPerformanceProfileResults",
        "summary": "Performance Profiles result",
        "description": "Get paginated Performance Profiles result",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Performance Profile results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryResultPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/performance/profiles/{id}/results/{result_id}": {
      "post": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "AddPerformanceProfileResult",
        "summary": "Add performance profiles result",
        "description": "Add performance profile result in given performance profile id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/resultId"
          }
        ],
        "requestBody": {
          "description": "Body for adding performance profile result",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/performanceResult"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance Profile results",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "service mesh performance"
        ],
        "operationId": "GetPerformanceProfileResult",
        "summary": "Performance Profiles result",
        "description": "Get the performance test result associated with the given profile id and with the given test id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/resultId"
          }
        ],
        "responses": {
          "200": {
            "description": "Performance Profile results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/performanceResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user/schedules": {
      "post": {
        "tags": [
          "scheduler"
        ],
        "operationId": "UpsertSchedule",
        "summary": "Upsert Schedule",
        "description": "It will create a new schedule if not present else it will update the entry matching with the provided id",
        "requestBody": {
          "$ref": "#/components/requestBodies/schedule"
        },
        "responses": {
          "201": {
            "description": "upserted given schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedule"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "scheduler"
        ],
        "operationId": "GetSchedules",
        "summary": "Get schedules",
        "description": "Get paginated schedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedulePage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user/schedules/{id}": {
      "get": {
        "tags": [
          "scheduler"
        ],
        "operationId": "GetSchedule",
        "summary": "Get Schedule by Id",
        "description": "Get schedule by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule associated with Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "scheduler"
        ],
        "operationId": "DeleteSchedule",
        "summary": "Delete Schedule by ID",
        "description": "Delete schedule by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/tokens": {
      "get": {
        "tags": [
          "tokens"
        ],
        "operationId": "GetUserTokens",
        "summary": "Get Tokens",
        "description": "Get tokens associated with logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/isOAuth"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "user tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tokenPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "tokens"
        ],
        "operationId": "GenerateToken",
        "summary": "Generate token",
        "description": "Generate token for logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/name"
          },
          {
            "$ref": "#/components/parameters/purpose"
          }
        ],
        "responses": {
          "200": {
            "description": "generated token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "tokens"
        ],
        "operationId": "DeleteUserTokens",
        "summary": "Delete token",
        "description": "Delete token for logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/tokenName"
          },
          {
            "$ref": "#/components/parameters/tokenId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mapObject"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/identity/tokens/{id}": {
      "get": {
        "tags": [
          "tokens"
        ],
        "operationId": "GetUserTokensByID",
        "summary": "Downloads user token by ID",
        "description": "This API endpoint downloads user token by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user's token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userToken"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/tokens/infinite": {
      "get": {
        "tags": [
          "tokens"
        ],
        "operationId": "IssueIndefiniteLifetimeToken",
        "summary": "Infinite token",
        "description": "Get Infinite Token",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "UUID of Admin User",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "provider",
            "in": "query",
            "description": "Remote provider",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "generated token",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/integrations/credentials": {
      "get": {
        "tags": [
          "credentials"
        ],
        "operationId": "GetUserCredentials",
        "summary": "Get user's credentials",
        "description": "Get all user's credentials for logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credentialsPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "credentials"
        ],
        "operationId": "DeleteUserCredential",
        "summary": "Delete user's credentials",
        "description": "Delete user's credentials (tombstoned records) for logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/credentialId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "credentials"
        ],
        "operationId": "SaveUserCredential",
        "summary": "Create Credential",
        "description": "Create new credentials for logged in user",
        "requestBody": {
          "$ref": "#/components/requestBodies/credential"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "credentials"
        ],
        "operationId": "UpdateUserCredential",
        "summary": "Update credential",
        "description": "Update credentials for logged in user",
        "requestBody": {
          "$ref": "#/components/requestBodies/credential"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/performance/result/total": {
      "get": {
        "tags": [
          "service mesh performance results"
        ],
        "operationId": "RetrieveTotalPerformanceTestRuns",
        "summary": "Performace tests run",
        "description": "Get total performace tests run",
        "responses": {
          "200": {
            "description": "performance tests run",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_runs": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/performance/results/metrics": {
      "put": {
        "tags": [
          "service mesh performance results"
        ],
        "operationId": "UpdateResultsWithMetrics",
        "summary": "Update SMP results",
        "description": "Update SMP results with metrics",
        "requestBody": {
          "$ref": "#/components/requestBodies/performanceResult"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/performance/results": {
      "post": {
        "tags": [
          "service mesh performance results"
        ],
        "operationId": "StoreResults",
        "summary": "Store SMP results",
        "description": "Store SMP results",
        "requestBody": {
          "$ref": "#/components/requestBodies/performanceResult"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "service mesh performance results"
        ],
        "operationId": "GetResults",
        "summary": "Get SMP results",
        "description": "Get SMP results",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "SMP results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryResultPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/performance/results/{id}": {
      "get": {
        "tags": [
          "service mesh performance results"
        ],
        "operationId": "GetResult",
        "summary": "Get SMP result by Id",
        "description": "Get SMP results associated with id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "SMP result associated with Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/performanceResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/smi/results": {
      "post": {
        "tags": [
          "service mesh interface"
        ],
        "operationId": "StoreSmiResult",
        "summary": "Store SMI result",
        "description": "It will insert the result if not present else it will update the matching entry",
        "requestBody": {
          "$ref": "#/components/requestBodies/smiResult"
        },
        "responses": {
          "201": {
            "description": "Id for stored SMI result",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "service mesh interface"
        ],
        "operationId": "GetSmiResults",
        "summary": "Get SMI Result",
        "description": "Get paginated SMI results",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "SMI results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/smiResultPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/smi/results/{id}": {
      "get": {
        "tags": [
          "service mesh interface"
        ],
        "operationId": "GetSmiResult",
        "summary": "Get SMI Result by Id",
        "description": "Get SMI Results by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "SMI result associated with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/smiResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/smi/results/total": {
      "get": {
        "tags": [
          "service mesh interface"
        ],
        "operationId": "RetrieveTotalSmiTestRuns",
        "summary": "SMI tests run",
        "description": "Get Total SMI test runs",
        "responses": {
          "200": {
            "description": "SMI tests run",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total_runs": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/smi/results/public": {
      "get": {
        "tags": [
          "service mesh interface"
        ],
        "operationId": "GetPublicResults",
        "summary": "SMI Public tests",
        "description": "Get SMI Public tests",
        "parameters": [
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Public SMI results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/smiResultPage"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/events": {
      "get": {
        "tags": [
          "events"
        ],
        "operationId": "GetEventsAggregate",
        "summary": "Get Events Aggregate",
        "description": "Get Events Aggreate Count",
        "parameters": [
          {
            "$ref": "#/components/parameters/cumulative"
          }
        ],
        "responses": {
          "200": {
            "description": "Events Aggregate Count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsAggregate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/events/date": {
      "get": {
        "tags": [
          "events"
        ],
        "operationId": "RetrieveResultsByDate",
        "summary": "Events by Date",
        "description": "Get Events by date",
        "parameters": [
          {
            "$ref": "#/components/parameters/cumulative"
          }
        ],
        "responses": {
          "200": {
            "description": "Events by date",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventTrackerGroupedArray"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/events/week": {
      "get": {
        "tags": [
          "events"
        ],
        "operationId": "RetrieveResultsByWeek",
        "summary": "Events by Week",
        "description": "Get Events by week",
        "parameters": [
          {
            "$ref": "#/components/parameters/cumulative"
          }
        ],
        "responses": {
          "200": {
            "description": "Events by week",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventTrackerGroupedArray"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/events/month": {
      "get": {
        "tags": [
          "events"
        ],
        "operationId": "RetrieveResultsByMonth",
        "summary": "Events by Month",
        "description": "Get Events by month",
        "parameters": [
          {
            "$ref": "#/components/parameters/cumulative"
          }
        ],
        "responses": {
          "200": {
            "description": "Events by month",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventTrackerGroupedArray"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/events/list": {
      "get": {
        "tags": [
          "events"
        ],
        "operationId": "GetEvents",
        "summary": "All Events",
        "description": "Get All events",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/eventsFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Events list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/events/summary": {
      "get": {
        "tags": [
          "events"
        ],
        "operationId": "GetEventSummaryByUser",
        "summary": "Events Summary",
        "description": "Get Events summary for a user",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Events Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventSummaryPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/events/types": {
      "get": {
        "tags": [
          "events"
        ],
        "operationId": "GetEventTypes",
        "summary": "Event Types",
        "description": "Get Events types",
        "responses": {
          "200": {
            "description": "Events Summary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string"
                      },
                      "action": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/capabilities": {
      "get": {
        "deprecated": true,
        "tags": [
          "capabilities"
        ],
        "operationId": "GetCapabilitie",
        "summary": "Capabilities",
        "description": "Get available capabilities for logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/os"
          },
          {
            "$ref": "#/components/parameters/playground"
          }
        ],
        "responses": {
          "200": {
            "description": "capabilities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/{meshery-version}/capabilities": {
      "get": {
        "tags": [
          "capabilities"
        ],
        "operationId": "GetCapabilities",
        "summary": "Capabilities By server version",
        "description": "Get available capabilities for logged in user",
        "parameters": [
          {
            "$ref": "#/components/parameters/mesheryVersion"
          },
          {
            "$ref": "#/components/parameters/os"
          },
          {
            "$ref": "#/components/parameters/playground"
          }
        ],
        "responses": {
          "200": {
            "description": "capabilities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/system/version": {
      "get": {
        "tags": [
          "system"
        ],
        "operationId": "GitVersionHandler",
        "summary": "Version Info",
        "description": "Meshery Git version and CommitSHA",
        "responses": {
          "200": {
            "description": "Meshery Cloud Version",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "commitSHA": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/content/patterns/resource": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "UpsertPatternResource",
        "summary": "Upsert Pattern resource",
        "description": "It will insert the pattern resource if not present else it will update the matching entry",
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryPatternResource"
        },
        "responses": {
          "200": {
            "description": "Meshery pattern resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPatternResource"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetPatternResources",
        "summary": "Get Pattern resources",
        "description": "Get paginated pattern resources",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/namespace"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/oamType"
          },
          {
            "$ref": "#/components/parameters/name",
            "description": "Name"
          }
        ],
        "responses": {
          "200": {
            "description": "Meshery pattern resources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPatternResourcePage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/patterns/resource/{id}": {
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetPatternResource",
        "summary": "Pattern Resource by ID",
        "description": "Get Pattern Resource By ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Meshery pattern resource associated with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPatternResource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "operationId": "DeletePatternResource",
        "summary": "Delete pattern resource",
        "description": "Delete pattern resource associated with id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted meshery pattern resource associated with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPatternResource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/patterns/upload/{id}": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "UpsertPatternSourceContent",
        "summary": "Upsert pattern source content",
        "description": "Upserts only pattern source content",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryPatternSourceContent"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/patterns": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "UpsertPattern",
        "summary": "Upsert Pattern",
        "description": "It will insert the pattern if not present else it will update the matching entry",
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryPatternRequestBody"
        },
        "responses": {
          "200": {
            "description": "Upserted pattern",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mesheryPattern"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetPatterns",
        "summary": "Get Patterns",
        "description": "Get paginated patterns",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/visibility"
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "UUID of User. Pass user_id for fetching public and published designs",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Patterns",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPatternPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "operationId": "DeletePatterns",
        "summary": "Delete patterns",
        "description": "Delete patterns with the provided ids",
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryPatternDeleteRequestBody"
        },
        "responses": {
          "200": {
            "description": "Deleted pattern",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPattern"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/patterns/{id}": {
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetPattern",
        "summary": "Get pattern by ID",
        "description": "Get pattern by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Pattern associated with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPattern"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "operationId": "DeletePattern",
        "summary": "Delete pattern by ID",
        "description": "Delete pattern associated with ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted pattern",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryPattern"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/patterns/clone/{id}": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "ClonePattern",
        "summary": "Clone pattern",
        "description": "Clone pattern associated with ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryCloneRequestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/catalog/content/{type}": {
      "get": {
        "tags": [
          "catalog"
        ],
        "operationId": "GetCatalogContent",
        "summary": "Get Catalog Content",
        "description": "Get catalog content by type",
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogContentType"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "catalog content",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "page_size": {
                          "type": "integer"
                        },
                        "total_count": {
                          "type": "integer"
                        },
                        "patterns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/mesheryPattern"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "page_size": {
                          "type": "integer"
                        },
                        "total_count": {
                          "type": "integer"
                        },
                        "filters": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/mesheryFilter"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      },
      "post": {
        "tags": [
          "catalog"
        ],
        "operationId": "PublishCatalogContent",
        "summary": "Publish Catalog Content",
        "description": "Sets the visibility of catalog content to published and sets CatalogData (if called by ADMIN or CURATOR), otherwise it pushes the request to CatalogRequests Table",
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogContentType"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryCatalogRequestBody"
        },
        "responses": {
          "200": {
            "description": "Catalog requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "catalog"
        ],
        "operationId": "UnPublishCatalogContent",
        "summary": "Unpublish Catalog Content",
        "description": "Sets the visibility of catalog content to private and removes the content from website (if called by ADMIN or CURATOR), otherwise rejects the request",
        "parameters": [
          {
            "$ref": "#/components/parameters/catalogContentType"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryCatalogRequestBody"
        },
        "responses": {
          "200": {
            "description": "Catalog requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/catalog/requests/approve": {
      "post": {
        "tags": [
          "catalog"
        ],
        "operationId": "ApproveCatalogRequest",
        "summary": "Approve Catalog Request",
        "description": "Approve Catalog Request",
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryCatalogRequestBody"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/catalog/requests/deny": {
      "post": {
        "tags": [
          "catalog"
        ],
        "operationId": "DenyCatalogRequest",
        "summary": "Deny Catalog Request",
        "description": "Deny Catalog Request",
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryCatalogRequestBody"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/catalog/requests": {
      "get": {
        "tags": [
          "catalog"
        ],
        "operationId": "GetCatalogRequest",
        "summary": "Catalog Request",
        "description": "Get all catalog requests (approved, denied or pending) in a paginated manner",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/requestFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Catalog requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogRequestsPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/filters": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "UpsertFilter",
        "summary": "Upsert Filter",
        "description": "It will insert the filter if not present else it will update the matching entry",
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryFilterRequestBody"
        },
        "responses": {
          "200": {
            "description": "Upserted filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mesheryFilter"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetFilters",
        "summary": "Get Filters",
        "description": "Get paginated filters",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/visibility"
          }
        ],
        "responses": {
          "200": {
            "description": "Filters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryFilterPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/filters/share": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "ShareFilters",
        "summary": "Share Filter",
        "description": "Share filter design with others",
        "requestBody": {
          "$ref": "#/components/requestBodies/designShare"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "description": "Only owner have access to changing sharing mode",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/filters/download/{id}": {
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetFilterFile",
        "summary": "Filter file",
        "description": "Get the filter associated with the given filter id without any metadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Filter file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/filter_file"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/filters/{id}": {
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetFilter",
        "summary": "Get filter by ID",
        "description": "Get filter by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Filter associated with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryFilter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "operationId": "DeleteFilter",
        "summary": "Delete filter by ID",
        "description": "Delete filter associated with ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryFilter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/filters/clone/{id}": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "CloneFilter",
        "summary": "Clone filter",
        "description": "Clone filter associated with ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryCloneRequestBody"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/applications": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "UpsertApplication",
        "summary": "Upsert Application",
        "description": "It will insert the application if not present else it will update the matching entry",
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryApplicationRequestBody"
        },
        "responses": {
          "200": {
            "description": "Upserted application",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/mesheryApplication"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetApplications",
        "summary": "Get Applications",
        "description": "Get paginated applications",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryApplicationPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/applications/upload/{id}": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "UpsertApplicationSourceContent",
        "summary": "Upsert application source content",
        "description": "Upserts only application source content",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/mesheryApplicationSourceContent"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/applications/download/{id}": {
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetApplicationSourceContent",
        "summary": "Get application source content",
        "description": "Get application source content",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "application source content associated with ID",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/source_content"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/applications/{id}": {
      "get": {
        "tags": [
          "content"
        ],
        "operationId": "GetApplication",
        "summary": "Get application by ID",
        "description": "Get application by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "application associated with ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryApplication"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "operationId": "DeleteApplication",
        "summary": "Delete application by ID",
        "description": "Delete application associated with ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryApplication"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/content/design/share": {
      "post": {
        "tags": [
          "content"
        ],
        "operationId": "HandleShare",
        "summary": "Design Share",
        "description": "Share design with others",
        "requestBody": {
          "$ref": "#/components/requestBodies/designShare"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "description": "Only owner have access to changing sharing mode",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/collaboration": {
      "get": {
        "tags": [
          "collaboration"
        ],
        "operationId": "CollaborationHandler",
        "summary": "Collaboration",
        "description": "Collaboration",
        "responses": {
          "101": {
            "description": "initate cross server collaboration"
          }
        }
      }
    },
    "/api/identity/users/request": {
      "post": {
        "tags": [
          "user onboarding"
        ],
        "operationId": "SignupRequest",
        "summary": "Sign up request",
        "description": "Updates user singup request",
        "requestBody": {
          "$ref": "#/components/requestBodies/signupData"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "user onboarding"
        ],
        "operationId": "GetSignupRequests",
        "summary": "Get all Signup requests",
        "description": "Get all Signup requests",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/requestFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "Signup request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signupRequestsPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/request/approve": {
      "post": {
        "tags": [
          "user onboarding"
        ],
        "operationId": "ApproveSignupRequest",
        "summary": "Approve Signup request",
        "description": "Approve Signup request",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Signup request id",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupation",
            "in": "query",
            "description": "Email",
            "schema": {
              "$ref": "#/components/schemas/email"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role in organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_type",
            "in": "query",
            "description": "Form Type (Kanvas or Playground)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status (approved / denied)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "query",
            "description": "Click up task id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_link",
            "in": "query",
            "description": "Click up task link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/request/deny": {
      "post": {
        "tags": [
          "user onboarding"
        ],
        "operationId": "DenySignupRequest",
        "summary": "Deny signup request",
        "description": "Deny Signup Request",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Signup request id",
            "schema": {
              "$ref": "#/components/schemas/id"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "First Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Last Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupation",
            "in": "query",
            "description": "Email",
            "schema": {
              "$ref": "#/components/schemas/email"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role in organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form_type",
            "in": "query",
            "description": "Form Type (Kanvas or Playground)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status (approved / denied)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "in": "query",
            "description": "Click up task id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_link",
            "in": "query",
            "description": "Click up task link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/request/approve/{id}": {
      "get": {
        "tags": [
          "user onboarding"
        ],
        "operationId": "ApproveSignupRequestByID",
        "summary": "Approve signup request by ID",
        "description": "Approve signup request associated with ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect: SERVER_BASE_URL/profile/roles"
          },
          "303": {
            "description": "Redirect: SERVER_BASE_URL/?source=<base64 encoded source url>"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/request/deny/{id}": {
      "get": {
        "tags": [
          "user onboarding"
        ],
        "operationId": "DenySignupRequestByID",
        "summary": "Deny signup request by ID",
        "description": "Deny signup request associated with ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect: SERVER_BASE_URL/profile/roles"
          },
          "303": {
            "description": "Redirect: SERVER_BASE_URL/?source=<base64 encoded source url>"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/request/notification": {
      "get": {
        "tags": [
          "user onboarding"
        ],
        "operationId": "GetSignupRequestNotification",
        "summary": "Signup request notification",
        "description": "Signup request notification",
        "responses": {
          "200": {
            "description": "Signup request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signupData"
                }
              }
            }
          },
          "204": {
            "description": "Status no content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/integrations/connections": {
      "post": {
        "tags": [
          "integrations"
        ],
        "operationId": "RegisterConnection",
        "summary": "Register Connection",
        "description": "Register with Meshery Cloud",
        "requestBody": {
          "$ref": "#/components/requestBodies/connectionPayload"
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "integrations"
        ],
        "operationId": "GetConnections",
        "summary": "Get connections",
        "description": "Get connections",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connectionPage"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/integrations/connections/{connectionId}": {
      "put": {
        "tags": [
          "integrations"
        ],
        "operationId": "EditConnectionByID",
        "summary": "Edit Connection by ID",
        "description": "Edit registered connection using the connection ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/connectionPayload"
        },
        "responses": {
          "200": {
            "description": "Edited connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/integrations/connections/status/{connectionId}": {
      "put": {
        "tags": [
          "integrations"
        ],
        "operationId": "UpdateConnectionStatusByID",
        "summary": "Update Connection Status by ID",
        "description": "Edit connection status using the connection ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "requestBody": {
          "description": "Body containing connection status to update.",
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            }
          },
          "500": {
            "description": "Event containing error details in metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          }
        }
      }
    },
    "/api/integrations/connections/status": {
      "get": {
        "tags": [
          "integrations"
        ],
        "operationId": "GetConnectionStatus",
        "summary": "Get status of all connections",
        "description": "Get summary about the status of all connections",
        "responses": {
          "200": {
            "description": "Status of connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connectionsStatusPage"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/integrations/meshmodels/models": {
      "get": {
        "tags": [
          "integrations"
        ],
        "operationId": "GetMeshModelModels",
        "summary": "Get MeshModel models",
        "description": "Get MeshModel models",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesizeWithAll"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "MeshModel Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/meshmodelModelsPage"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/integrations/meshmodels/categories": {
      "get": {
        "tags": [
          "integrations"
        ],
        "operationId": "GetMeshModelCategories",
        "summary": "Get MeshModel categories",
        "description": "Get MeshModel categories",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "MeshModel Categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/meshmodelCategoriesPage"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      }
    },
    "/api/integrations/connections/{connectionKind}": {
      "get": {
        "tags": [
          "integrations"
        ],
        "operationId": "GetConnectionsByKind",
        "summary": "Get connections by kind",
        "description": "Get connections by kind",
        "parameters": [
          {
            "$ref": "#/components/parameters/connectionKind"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Connections by kind",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "security": []
      },
      "delete": {
        "tags": [
          "integrations"
        ],
        "operationId": "DeleteConnection",
        "summary": "Delete connection",
        "description": "Delete registered connection",
        "parameters": [
          {
            "$ref": "#/components/parameters/connectionKind"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/integrations/connections/{connectionKind}/{connectionId}": {
      "get": {
        "tags": [
          "integrations"
        ],
        "operationId": "GetConnectionsByKindAndConnectionID",
        "summary": "Get connections by kind and connectionID.",
        "description": "Get connections by kind (kind is required because this API returns the results in non std format of a connection)",
        "parameters": [
          {
            "$ref": "#/components/parameters/connectionKind"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Connections by kind",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/k8sContextPersistResponse"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/integrations/connections/meshery/{mesheryServerID}": {
      "delete": {
        "tags": [
          "integrations"
        ],
        "operationId": "DeleteMesheryConnection",
        "summary": "Delete Meshery connection",
        "description": "Deletes a given meshery connection. This is generally used for deleting connections from Meshery Server UI where UI is not aware of connection IDs.",
        "parameters": [
          {
            "$ref": "#/components/parameters/serverId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs": {
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Returns all organizations to which the user belongs",
        "operationId": "getOrgs",
        "summary": "Read organizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organizationsPage"
                }
              }
            },
            "description": "Get organization's response"
          },
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "description": "Creates a new organization",
        "operationId": "createOrg",
        "summary": "Create an organization",
        "requestBody": {
          "$ref": "#/components/requestBodies/organizationPayload"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization"
                }
              }
            },
            "description": "organization creation response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}": {
      "get": {
        "tags": [
          "organization"
        ],
        "description": "Returns the organization",
        "operationId": "getOrg",
        "summary": "Read an organization",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization"
                }
              }
            },
            "description": "Get organization's response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "description": "Deletes the organization",
        "operationId": "deleteOrg",
        "summary": "Delete an organization",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "204": {
            "description": "Status no content"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "organization"
        ],
        "description": "Updates the organization",
        "operationId": "handleUpdateOrg",
        "summary": "Update an organization",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/organizationPayload"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization"
                }
              }
            },
            "description": "organization updated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/teams/{teamId}": {
      "post": {
        "tags": [
          "organization"
        ],
        "description": "Add team to organization",
        "summary": "Add team to organization",
        "operationId": "AddTeamToOrg",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          },
          {
            "$ref": "#/components/parameters/teamId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teamsOrganizationsMapping"
                }
              }
            },
            "description": "organization updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "description": "Delete team from organization",
        "summary": "Delete team from organization",
        "operationId": "RemoveTeamFromOrg",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          },
          {
            "$ref": "#/components/parameters/teamId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teamsOrganizationsMapping"
                }
              }
            },
            "description": "Team deleted from Organization"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "teams"
        ],
        "description": "Returns the specified team",
        "operationId": "getTeam",
        "summary": "Read Team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "description": "Get team's response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availableTeam"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "teams"
        ],
        "operationId": "UpdateTeam",
        "summary": "Update the specified team",
        "description": "Updates the specified team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/teamPayload"
        },
        "responses": {
          "200": {
            "description": "Updated team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/availableTeam"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "description": "Returns all teams belonging to an organization",
        "operationId": "GetTeamsOfOrg",
        "summary": "Get teams of an Organization",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teamPage"
                }
              }
            },
            "description": "Team's"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/entitlement/subscriptions/{organizationId}": {
      "get": {
        "tags": [
          "subscription"
        ],
        "description": "Returns all subscriptions of a user",
        "operationId": "getSubscriptions",
        "summary": "Read subscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscriptionsPage"
                }
              }
            },
            "description": "Get subscription response"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/entitlement/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "subscription"
        ],
        "description": "Returns the subscription",
        "operationId": "getSubscriptionByID",
        "summary": "Read a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Get subscription's response"
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "subscription"
        ],
        "description": "Deletes the subscription",
        "operationId": "deleteSubscriptionByID",
        "summary": "Delete a subscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/subscriptionId"
          }
        ],
        "responses": {
          "204": {
            "description": "Status no content"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/entitlement/subscriptions": {
      "post": {
        "tags": [
          "subscription"
        ],
        "description": "Upserts a subscription",
        "operationId": "upsertSubscription",
        "summary": "Upsert subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/subscription"
              }
            }
          },
          "description": "Subscription to be created",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            },
            "description": "Subscription creation response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/entitlement/plans": {
      "post": {
        "tags": [
          "plans"
        ],
        "description": "Creates a new plan",
        "operationId": "CreatePlan",
        "summary": "Create a plan",
        "requestBody": {
          "$ref": "#/components/requestBodies/plan"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plan"
                }
              }
            },
            "description": "Plan creation response"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/entitlement/plans/{organizationId}": {
      "get": {
        "tags": [
          "plans"
        ],
        "description": "Returns all plans for given organization",
        "operationId": "GetPlans",
        "summary": "Get all plans",
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all plans with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/planPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/entitlement/plans/{planId}": {
      "delete": {
        "tags": [
          "plans"
        ],
        "description": "Deletes the plan with the given ID",
        "operationId": "DeletePlan",
        "summary": "Delete a plan",
        "parameters": [
          {
            "$ref": "#/components/parameters/planId"
          }
        ],
        "responses": {
          "204": {
            "description": "Status no content"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "plans"
        ],
        "description": "Updates the plan with the given ID",
        "operationId": "UpdatePlan",
        "summary": "Update a plan",
        "parameters": [
          {
            "$ref": "#/components/parameters/planId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plan"
                }
              }
            },
            "description": "subscription updated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "description": "Returns all teams to which the user belongs",
        "operationId": "getTeams",
        "summary": "Read Teams",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Get teams's response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teamPage"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "teams"
        ],
        "operationId": "CreateTeam",
        "summary": "Create Team",
        "description": "Creates a new Team",
        "requestBody": {
          "$ref": "#/components/requestBodies/teamPayload"
        },
        "responses": {
          "201": {
            "description": "Created team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/teams/{teamId}/users": {
      "get": {
        "tags": [
          "teams"
        ],
        "operationId": "ListUsersInTeam",
        "summary": "List users in Team",
        "description": "Lists the users in the specified team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teamMembersPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/teams/{teamId}/users/{userId}": {
      "post": {
        "tags": [
          "teams"
        ],
        "operationId": "AddUserToTeam",
        "summary": "Add user to team",
        "description": "Adds the user to the specified team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "description": "UserTeamMapping",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersTeamsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "teams"
        ],
        "operationId": "RemoveUserFromTeam",
        "summary": "Remove user membership from team",
        "description": "Remove the user from the specified team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersTeamsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/teams/{teamId}/users": {
      "get": {
        "tags": [
          "teams"
        ],
        "operationId": "ListUsersNotInTeam",
        "summary": "List users not in Team",
        "description": "Lists the users not in the specified team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/orgID"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teamMembersPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/teams/{teamId}/roles": {
      "get": {
        "tags": [
          "teams"
        ],
        "operationId": "ListTeamRoles",
        "summary": "List Team roles",
        "description": "Lists the roles associated with the team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          }
        ],
        "responses": {
          "200": {
            "description": "Roles assigned to team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/roles"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/teams/{teamId}/roles/{roleId}": {
      "post": {
        "tags": [
          "teams"
        ],
        "operationId": "AddRoleToTeam",
        "summary": "Add role to team",
        "description": "Adds role to the specified team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "teams"
        ],
        "operationId": "RemoveRoleFromTeam",
        "summary": "Remove role from team",
        "description": "Removes role from the specified team",
        "parameters": [
          {
            "$ref": "#/components/parameters/teamId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/keys": {
      "get": {
        "tags": [
          "keys"
        ],
        "operationId": "GetKeys",
        "summary": "Get keys",
        "description": "Lists the keys available",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/keysPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "keys"
        ],
        "operationId": "UpsertKey",
        "summary": "Upsert key",
        "description": "A new key is created if id is not provided in the request body. To update an existing key pass the updated key along with id in request body.",
        "requestBody": {
          "$ref": "#/components/requestBodies/keyPayload"
        },
        "responses": {
          "200": {
            "description": "Keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/key"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/keys/{id}": {
      "get": {
        "tags": [
          "key"
        ],
        "operationId": "GetKeyByID",
        "summary": "Get Key associated with id",
        "description": "Get key by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/key"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "keys"
        ],
        "operationId": "UpdateKey",
        "summary": "Update keys",
        "description": "Delete key associated with id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/keychains": {
      "get": {
        "tags": [
          "key chains"
        ],
        "operationId": "GetKeychains",
        "summary": "Get Key Chains",
        "description": "Lists the key chains",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Key Chains",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/keysPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "key chains"
        ],
        "operationId": "UpsertKeychain",
        "summary": "Upsert Keychain",
        "description": "A new keychain is created if id is not provided in the request body. To update an existing keychain pass the updated keychain along with id in request body.",
        "requestBody": {
          "$ref": "#/components/requestBodies/keychainPayload"
        },
        "responses": {
          "200": {
            "description": "Upserted keychain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/keychain"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/keychains/{keychainID}/keys": {
      "get": {
        "tags": [
          "key chains"
        ],
        "description": "Returns all keys belonging to a keychain",
        "operationId": "GetkeysOfOrg",
        "summary": "Get keys of an keychain",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/keychainId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/keysPage"
                }
              }
            },
            "description": "Key's of Keychain's"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/keychains/{id}/{keyId}": {
      "post": {
        "tags": [
          "key chains"
        ],
        "operationId": "AddtoKeychain",
        "summary": "Add Key to Keychain",
        "description": "Add a key to a Keychain",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/keyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "key chains"
        ],
        "operationId": "DeleteKeyFromKeychain",
        "summary": "Remove Key from Keychain",
        "description": "Remove a key from  Keychain",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/keyId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/keychains/{id}": {
      "get": {
        "tags": [
          "key chains"
        ],
        "operationId": "GetKeychainByID",
        "summary": "Get Key Chain associated with id",
        "description": "Lists the key chain",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Key Chain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/keychain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "key chains"
        ],
        "operationId": "DeleteKeychain",
        "summary": "Remove Keychain",
        "description": "Deleting a Keychain doesn't delete keys associated with it, instead key chain reference is removed from keys i.e. keys are no longer part of any keychain",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/badges": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetAvailableBadges",
        "summary": "Gets available badges",
        "description": "Gets available badges",
        "responses": {
          "200": {
            "description": "Badges",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badges"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/badges": {
      "put": {
        "tags": [
          "users"
        ],
        "operationId": "AssignBadges",
        "summary": "Assign a badge to user",
        "description": "Assign a badge to user",
        "requestBody": {
          "$ref": "#/components/requestBodies/badgeRequestPayload"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "operationId": "UnAssignBadges",
        "summary": "UnAssign a badge to user",
        "description": "Assign a badge to user",
        "requestBody": {
          "$ref": "#/components/requestBodies/badgeRequestPayload"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/orgs/{orgID}/users/{userId}": {
      "post": {
        "tags": [
          "organization"
        ],
        "operationId": "AddUserToOrg",
        "summary": "Add user to org",
        "description": "Adds the user to the specified org",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          },
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "organization"
        ],
        "operationId": "DeleteUserFromOrg",
        "summary": "Delete user from org",
        "description": "Deletes the user from the specified org",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          },
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/identity/users/profile/provider": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "GetUserProvider",
        "summary": "Get user provider",
        "description": "Get user provider",
        "responses": {
          "200": {
            "description": "User Provider",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "provider": {
                      "enum": [
                        "github",
                        "google",
                        "meshery-cloud"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/identity/users/password": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "UpdateUsersPassword",
        "summary": "Update user password",
        "description": "Update user password",
        "requestBody": {
          "description": "Body for new password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "password",
                    "example": "this is test password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/environments": {
      "post": {
        "tags": [
          "environments"
        ],
        "operationId": "CreateEnvironment",
        "summary": "Create an environment",
        "description": "Creates a new environment",
        "requestBody": {
          "$ref": "#/components/requestBodies/environmentPayload"
        },
        "responses": {
          "201": {
            "description": "Created environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "environments"
        ],
        "operationId": "GetEnvironments",
        "summary": "Get all environments",
        "description": "Gets all environments",
        "parameters": [
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/orgIDQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Environments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentPage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/environments/{environmentId}": {
      "get": {
        "tags": [
          "environments"
        ],
        "operationId": "GetEnvironmentByID",
        "summary": "Get an environment by ID",
        "description": "Gets an environment by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/orgIDQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "environments"
        ],
        "operationId": "DeleteEnvironment",
        "summary": "Delete an environment",
        "description": "Deletes an environment by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "responses": {
          "204": {
            "description": "Environment deleted successfully"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "environments"
        ],
        "operationId": "UpdateEnvironment",
        "summary": "Update an environment",
        "description": "Updates the environment",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/environmentPayload"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/environments/{environmentId}/connections": {
      "get": {
        "tags": [
          "environments"
        ],
        "operationId": "GetEnvironmentConnections",
        "summary": "Get connections of an environment",
        "description": "Gets connections of an environment by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Environment connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connectionPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/environments/{environmentId}/connections/{connectionId}": {
      "post": {
        "tags": [
          "environments"
        ],
        "operationId": "AddConnectionToEnvironment",
        "summary": "Add connection to environment",
        "description": "Adds a connection to an environment by their IDs",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "environments"
        ],
        "operationId": "RemoveConnectionFromEnvironment",
        "summary": "Remove connection from environment",
        "description": "Removes a connection from an environment by their IDs",
        "parameters": [
          {
            "$ref": "#/components/parameters/environmentId"
          },
          {
            "$ref": "#/components/parameters/connectionId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces": {
      "post": {
        "tags": [
          "workspaces"
        ],
        "operationId": "CreateWorkspace",
        "summary": "Create an workspace",
        "description": "Creates a new workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/workspacePayload"
        },
        "responses": {
          "201": {
            "description": "Created workspace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "workspaces"
        ],
        "operationId": "GetWorkspaces",
        "summary": "Get all workspaces",
        "description": "Gets all workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/orgIDQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacePage"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}": {
      "get": {
        "tags": [
          "workspaces"
        ],
        "operationId": "GetWorkspaceByID",
        "summary": "Get an workspace by ID",
        "description": "Gets an workspace by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/orgIDQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspace"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "workspaces"
        ],
        "operationId": "DeleteWorkspace",
        "summary": "Delete an workspace",
        "description": "Deletes an workspace by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          }
        ],
        "responses": {
          "204": {
            "description": "Workspace deleted successfully"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "workspaces"
        ],
        "operationId": "UpdateWorkspace",
        "summary": "Update an workspace",
        "description": "Updates the workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/workspaceUpdatePayload"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}/teams": {
      "get": {
        "tags": [
          "workspaces"
        ],
        "operationId": "GetTeamsOfWorkspace",
        "summary": "Get all teams assigned to a workspace",
        "description": "Gets an Teams of a given workspace by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/teamPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}/teams/{teamId}": {
      "delete": {
        "tags": [
          "workspaces"
        ],
        "operationId": "UnassignTeamFromWorkspace",
        "summary": "Unassign a team from a workspace",
        "description": "Unassigns a team from a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/teamId"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces teams mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesTeamsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "workspaces"
        ],
        "operationId": "AssignTeamToWorkspace",
        "summary": "Assign a team to a workspace",
        "description": "Assigns a team to a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/teamId"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces teams mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesTeamsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}/environments": {
      "get": {
        "tags": [
          "workspaces"
        ],
        "operationId": "GetEnvironmentsOfWorkspace",
        "summary": "Get all environments assigned to a workspace",
        "description": "Gets an environments of a given workspace by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}/environments/{environmentId}": {
      "delete": {
        "tags": [
          "workspaces"
        ],
        "operationId": "UnassignEnvironmentFromWorkspace",
        "summary": "Unassign a environment from a workspace",
        "description": "Unassigns a environment from a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces environments mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesEnvironmentsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "workspaces"
        ],
        "operationId": "AssignEnvironmentToWorkspace",
        "summary": "Assign a environment to a workspace",
        "description": "Assigns a environment to a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/environmentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces environments mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesEnvironmentsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}/designs/{designId}": {
      "delete": {
        "tags": [
          "workspaces"
        ],
        "operationId": "UnassignDesignFromWorkspace",
        "summary": "Unassign a design from a workspace",
        "description": "Unassign a design from a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/designId"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces designs mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesDesignsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "workspaces"
        ],
        "operationId": "AssignDesignToWorkspace",
        "summary": "Assign a design to a workspace",
        "description": "Assigns a design to a workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/designId"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspaces designs mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workspacesDesignsMapping"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}/designs": {
      "get": {
        "tags": [
          "workspaces"
        ],
        "operationId": "GetDesignsOfWorkspace",
        "summary": "Get all designs assigned to a workspace",
        "description": "Gets an designs of a given workspace by its ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Design",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mesheryDesignPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/workspaces/{workspaceId}/events": {
      "get": {
        "tags": [
          "workspaces"
        ],
        "operationId": "GetEventsOfWorkspace",
        "summary": "Get all events of workspace",
        "description": "Get all events of workspace. Only users that have access to a workspace can get its events. Provider Admins can see events for any workspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/workspaceId"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pagesize"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Events",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsPage"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  }
}